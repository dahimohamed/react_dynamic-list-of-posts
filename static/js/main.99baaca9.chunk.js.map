{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectPost","selectedPost","useState","isPostSelected","setIsPostSelected","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","Loader","NewCommentForm","addComment","submitting","setSubmitting","name","email","errors","setErrors","setValues","handleChange","event","target","field","value","current","handleSubmit","a","preventDefault","onSubmit","onReset","htmlFor","placeholder","classNames","onChange","PostDetails","comments","setComments","isLoading","setIsLoading","hasError","setHasError","isVisible","setIsVisible","loadComments","postId","loadedcomments","handleDeleteComment","filteredComments","filter","comment","newComment","currentComments","useEffect","length","href","UserSelector","users","selectUser","selectedUser","expanded","setExpanded","handleDocumentClick","document","addEventListener","removeEventListener","role","user","getUsers","App","setUsers","setPosts","setSelectedUser","setSelectedPost","loadUsers","loadedUsers","loadUserPosts","userId","loadedUserPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.99baaca9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  selectPost: (post: Post | null) => void,\n  selectedPost: Post | null,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPost,\n  selectedPost,\n}) => {\n  const [isPostSelected, setIsPostSelected] = useState(false);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost?.id === post.id\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => {\n                        selectPost(null);\n                      }}\n                    >\n                      Close\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => {\n                        selectPost(post);\n                        setIsPostSelected(!isPostSelected);\n                      }}\n                    >\n                      Open\n                    </button>\n                  )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => (\n  client.get<Comment[]>(`/comments?postId=${postId}`)\n);\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => (\n  client.delete(`/comments/${commentId}`)\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ninterface Props {\n  addComment: (data: CommentData) => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [submitting, setSubmitting] = useState(false);\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [{ name, email, body }, setValues] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const clearForm = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name: field, value } = event.target;\n\n    setValues(current => ({ ...current, [field]: value }));\n    setErrors(current => ({ ...current, [field]: false }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !name,\n      email: !email,\n      body: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    await addComment({\n      name,\n      email,\n      body,\n    });\n\n    setSubmitting(false);\n    setValues(current => ({ ...current, body: '' }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={clearForm} data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { createComment, deleteComment, getComments } from '../api/comments';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ninterface Props {\n  selectedPost: Post,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const loadComments = async () => {\n    setIsVisible(false);\n    setIsLoading(true);\n    try {\n      const loadedcomments = await getComments(selectedPost.id);\n\n      setComments(loadedcomments);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    const filteredComments = comments.filter(\n      comment => comment.id !== commentId,\n    );\n\n    setComments(filteredComments);\n    await deleteComment(commentId);\n  };\n\n  const addComment = async ({ name, email, body }: CommentData) => {\n    try {\n      const newComment = await createComment({\n        name,\n        email,\n        body,\n        postId: selectedPost.id,\n      });\n\n      setComments(\n        currentComments => [...currentComments, newComment],\n      );\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [selectedPost.id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          { isLoading && <Loader />}\n\n          {!isLoading && hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length && !hasError && !isLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => {\n                        handleDeleteComment(comment.id);\n                      }}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isLoading && !hasError && !isVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => {\n                setIsVisible(true);\n              }}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {!isLoading && !hasError && isVisible && (\n          <NewCommentForm addComment={addComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[],\n  selectUser: (user: User) => void,\n  selectedUser: User | null,\n  selectPost: (post: Post | null) => void,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectUser,\n  selectedUser,\n  selectPost,\n}) => {\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [expanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': expanded })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>{ selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => {\n                selectUser(user);\n                selectPost(null);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = async () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  const loadUserPosts = async () => {\n    setIsLoading(true);\n    try {\n      if (selectedUser) {\n        const loadedUserPosts = await getUserPosts(selectedUser.id);\n\n        setPosts(loadedUserPosts);\n      }\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    loadUserPosts();\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                  selectPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && selectedUser && <Loader />}\n\n                {selectedUser && hasError && !isLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && !isLoading && !hasError && !posts.length && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n\n                )}\n\n                {selectedUser && !isLoading && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails selectedPost={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => (\n  client.get<Post[]>(`/posts?userId=${userId}`)\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}